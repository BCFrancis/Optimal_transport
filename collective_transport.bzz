#
# Executed once at init time
#
include "include/vec2.bzz"

state = -1

function force_vector(rid, data) {
  return math.vec2.newp(-1*(100/data.distance)^2, data.azimuth)
}

function force_sum(rid, data, accum) {
  return math.vec2.add(data, accum)
}
 

function init() {
  reset()

	math.rng.setseed(id)
}

#
# Executed for each step
#
function step() {
	time = time + 1
	if (time > 2 and first){
		state = 0
		first = 0
	}
	neighbors.broadcast("my_state", state)
	if(state == 0){
		y_diff = obj_position[1] - pose.position.y
		x_diff = obj_position[0] - pose.position.x
  	target_angle = math.atan(y_diff, x_diff)
	  angle_diff = target_angle - pose.orientation.yaw
		pi = math.pi
		while (angle_diff > pi) {
      angle_diff = angle_diff + (-2 * pi)
   	}
   	while (angle_diff < -pi) {
      angle_diff = angle_diff + (2 * pi)
   	}
		turning_speed = 15.0
		if (angle_diff >= 0){
			set_wheels(-turning_speed,turning_speed)	
		}
		if (angle_diff < 0){
			set_wheels(turning_speed,-turning_speed)	
		}
		log(id, " ", angle_diff)
		if (math.abs(angle_diff) < 0.1) {
			state = 1
		}
	}
	if (state == 1) {
		set_wheels(20.0,20.0)	
  	touching = 0
		foreach(proximity, function(key, value) {
      if (value.value > 0.9){		
				touching = 1
			}
    })
		if (touching){
				#gripper_lock()
				set_wheels(0.0,0.0)	
				state = 2
			}
	}
	if (state == 2){
		ready = 0
		neighbors.listen("my_state",
      function(value_id, value, robot_id) {
			if (value == 2) {
				ready = ready+1
			}
			if (ready == neighbors.count()){
				all_ready = 1
			}		
			})		
		
		if (all_ready) {
			state = 3
			init_time = time
		}
	}
	if (state == 3){
		initial_dispersion = 10.0
		follower_time = 20.0
		reset_time = follower_time + 20.0
		force = neighbors.map(force_vector).reduce(force_sum, math.vec2.new(0.0, 0.0))
		if(neighbors.count() > 0){
    	math.vec2.scale(force, 1.0 / neighbors.count())
		}
		if (time - init_time  < initial_dispersion){
			goto(force.x, force.y)
		}
		else {
			if ((time - init_time  > follower_time) and (time - init_time <= reset_time))  {
				goto(force.x, force.y)
			} else if (time - init_time > reset_time) {
				state = 0
			}
			else {
				l_dist = 0.0
				r_dist = 0.0
				i = 0
				while (i < 23){
					i = i + 1
					if (proximity[i].value > 0){
						if (i < 12) {
							l_dist = math.max(l_dist,proximity[i].value)
						} else if (i > 12) {
							r_dist = math.max(r_dist,proximity[i].value)
						}
					}
				}
				turn_coeff = 20.0
				inside_wheel = 8.0
				outside_wheel = 12.0
				if (l_dist > r_dist) {
					speed_modifier = turn_coeff*(l_dist- 0.5)
					set_wheels(inside_wheel + speed_modifier, outside_wheel)
				} else {
					speed_modifier = turn_coeff*(r_dist - 0.5)
					set_wheels(outside_wheel, inside_wheel + speed_modifier)
				}
			}
		}
	}
	debug.print(state)
}

#
# Executed once upon resetting
#
function reset() {
	state = -1
	turret_enable()
	time = 0
	first = 1
	all_ready = 0
}

#
# Executed once upon closing ARGoS
#
function destroy() {
  # Nothing to do
}

